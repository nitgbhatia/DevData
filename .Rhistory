idaho_h <- read.csv("getdata-data-ss06hid.csv")
pwd
pd
ls
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
install.packages("data.table")
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
install.packages("RCurl")
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
install.packages("Rcurl")
load(file="trainingModel.RData", verbose=TRUE)
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("Rcuel")
install.packages("Rcurl")
install.packages('Rcurl')
install.packages("RCurl")
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
require(data.table)
SetInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
install.packages("setInternet2")
install.packages("utils")
install.packages("utils")
install.packages("R.utils")
require(data.table)
SetInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
setwd("~/Desktop/Coursera /Prac Machine Learning")
install.packages("data.table", repos="http://R-Forge.R-project.org")
install.packages("data.table", repos = "http://R-Forge.R-project.org")
message(sprintf("Run time: %s\nR version: %s", Sys.time(), R.Version()$version.string))
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
install.packages("data.table")
install.packages("data.table")
library(data.table)
example(data.table)
?data.table
?fread
update.packages()
require(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
?setInternet2
pwd
pwd
pwd()
pd
setwd("~/Desktop/Coursera /Prac Machine Learning")
getwd
getwd()
set.seed(614)
library(lattice); library(ggplot2); library(caret)
pml.training <- read.csv(""~/Desktop/Coursera /Prac Machine Learning /pml-training.csv")
inTrain <- createDataPartition(y=pml.training$classe, p=0.9, list=FALSE)
training <- pml.training[inTrain,]
testing <- pml.training[-inTrain,]
install.packages("caret")
install.packages("ggplot2")
install.packages("lattice")
set.seed(614)
library(lattice); library(ggplot2); library(caret)
library(caret)
install.packages("caret")
set.seed(614)
library(lattice); library(ggplot2); library(caret)
pml.training <- read.csv(""~/Desktop/Coursera /Prac Machine Learning /pml-training.csv")
pml.training <- read.csv("~/Desktop/Coursera /Prac Machine Learning /pml-training.csv")
pml.training <- read.csv("~/Desktop/Coursera/Prac Machine Learning/pml-training.csv")
pml.training <- read.csv("~/Desktop/Coursera/Prac Machine Learning/pml-training.csv")
pml.training <- read.csv("~/Desktop/Coursera /Prac Machine Learning/pml-training.csv")
inTrain <- createDataPartition(y=pml.training$classe, p=0.9, list=FALSE)
training <- pml.training[inTrain,]
testing <- pml.training[-inTrain,]
ptm <- proc.time()
modFit <- train(classe ~ user_name + pitch_arm + yaw_arm + roll_arm + roll_belt + pitch_belt + yaw_belt + gyros_belt_x + gyros_belt_y + gyros_belt_z + accel_belt_x + accel_belt_y + accel_belt_z + magnet_belt_x + magnet_belt_y + magnet_belt_z + gyros_arm_x + gyros_arm_y + gyros_arm_z + accel_arm_x + accel_arm_y + accel_arm_z + magnet_arm_x + magnet_arm_y + magnet_arm_z + roll_dumbbell + pitch_dumbbell + yaw_dumbbell, method="gbm", data=training, verbose=FALSE)
ptm <- proc.time()
modFit <- train(classe ~ user_name + pitch_arm + yaw_arm + roll_arm + roll_belt + pitch_belt + yaw_belt + gyros_belt_x + gyros_belt_y + gyros_belt_z + accel_belt_x + accel_belt_y + accel_belt_z + magnet_belt_x + magnet_belt_y + magnet_belt_z + gyros_arm_x + gyros_arm_y + gyros_arm_z + accel_arm_x + accel_arm_y + accel_arm_z + magnet_arm_x + magnet_arm_y + magnet_arm_z + roll_dumbbell + pitch_dumbbell + yaw_dumbbell, method="gbm", data=training, verbose=FALSE)
install.packages("e1071")
modFit <- train(classe ~ user_name + pitch_arm + yaw_arm + roll_arm + roll_belt + pitch_belt + yaw_belt + gyros_belt_x + gyros_belt_y + gyros_belt_z + accel_belt_x + accel_belt_y + accel_belt_z + magnet_belt_x + magnet_belt_y + magnet_belt_z + gyros_arm_x + gyros_arm_y + gyros_arm_z + accel_arm_x + accel_arm_y + accel_arm_z + magnet_arm_x + magnet_arm_y + magnet_arm_z + roll_dumbbell + pitch_dumbbell + yaw_dumbbell, method="gbm", data=training, verbose=FALSE)
proc.time() - ptm
1161/60
print(modFit)
predictTr <- predict(modFit,training)
table(predictTr, training$classe)
summary(modFit,n.trees=150)
qplot(roll_belt, yaw_belt,colour=classe,data=training)
ggplot(modFit)
predictTe <- predict(modFit,testing)
table(predictTe, testing$classe)
pml.testing <- read.csv("~/R/Coursera /Prac Machine Learning/pml-testing.csv")
pml.testing <- read.csv("~/Coursera /Prac Machine Learning/pml-testing.csv")
pml.testing <- read.csv("~/Desktop/Coursera /Prac Machine Learning/pml-testing.csv")
answers <- as.character(predict(modFit, pml.testing))
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
library(shiny)
install.packages('shiny')
library(shiny)
library(ggplot2)
library(data.table)
library(maps)
library(rCharts)
library(reshape2)
install.packages('maps')
install.packages('rCharts')
library(markdown)
library(mapproj)
install.packages('mapproj')
states_map <- map_data("state")
dt <- fread('repdata-data-StormData.csv')
setwd("~/Desktop/Coursera /Dev data products")
dt <- fread('repdata-data-StormData.csv')
getwd()
dt <- fread('/Users/nitikagaiha/Desktop/Coursera/Dev data products/repdata-data-StormData.csv')
dt <- fread("/Users/nitikagaiha/Desktop/Coursera/Dev data products/repdata-data-StormData.csv")
dt <- fread("~/Desktop/Coursera /Dev data products/repdata-data-StormData.csv")
dt <- fread("repdata-data-StormData.csv")
dt <- fread("events.agg.csv")
dt$EVTYPE <- tolower(dt$EVTYPE)
evtypes <<- sort(unique(dt$EVTYPE))
shinyServer(function(input, output) {
dt.agg <- reactive({
tmp <- merge(
data.table(STATE=sort(unique(dt$STATE))),
dt[
YEAR >= input$range[1] & YEAR <= input$range[2] & EVTYPE %in% input$evtypes,
list(
COUNT=sum(COUNT),
INJURIES=sum(INJURIES),
FATALITIES=sum(FATALITIES),
PROPDMG=round(sum(PROPDMG), 2),
CROPDMG=round(sum(CROPDMG), 2)
),
by=list(STATE)],
by=c('STATE'), all=TRUE
)
tmp[is.na(tmp)] <- 0
tmp
})
dt.agg.year <- reactive({
dt[
YEAR >= input$range[1] & YEAR <= input$range[2] & EVTYPE %in% input$evtypes,
list(
COUNT=sum(COUNT),
INJURIES=sum(INJURIES),
PROPDMG=round(sum(PROPDMG), 2),
FATALITIES=sum(FATALITIES),
CROPDMG=round(sum(CROPDMG), 2)
),
by=list(YEAR)
]
})
output$populationImpactByState <- renderPlot({
data <- dt.agg()
if(input$populationCategory == 'both') {
data$Affected <- data$INJURIES + data$FATALITIES
} else if(input$populationCategory == 'fatalities') {
data$Affected <- data$FATALITIES
} else {
data$Affected <-data$INJURIES
}
title <- paste("Population impact", input$range[1], "-", input$range[2], "(number of affected)")
p <- ggplot(data, aes(map_id = STATE))
p <- p + geom_map(aes(fill = Affected), map = states_map, colour='black') + expand_limits(x = states_map$long, y = states_map$lat)
p <- p + coord_map() + theme_bw()
p <- p + labs(x = "Long", y = "Lat", title = title)
print(p)
})
output$economicImpactByState <- renderPlot({
data <- dt.agg()
if(input$economicCategory == 'both') {
data$Damages <- data$PROPDMG + data$CROPDMG
} else if(input$economicCategory == 'crops') {
data$Damages <- data$CROPDMG
} else {
data$Damages <- data$PROPDMG
}
title <- paste("Economic impact", input$range[1], "-", input$range[2], "(Million USD)")
p <- ggplot(data, aes(map_id = STATE))
p <- p + geom_map(aes(fill = Damages), map = states_map, colour='black') + expand_limits(x = states_map$long, y = states_map$lat)
p <- p + coord_map() + theme_bw()
p <- p + labs(x = "Long", y = "Lat", title = title)
print(p)
})
output$evtypeControls <- renderUI({
if(1) {
checkboxGroupInput('evtypes', 'Event types', evtypes, selected=evtypes)
}
})
dataTable <- reactive({
dt.agg()[, list(
State=state.abb[match(STATE, tolower(state.name))],
Count=COUNT,
Injuries=INJURIES,
Fatalities=FATALITIES,
Property.damage=PROPDMG,
Crops.damage=CROPDMG)
]
})
output$table <- renderDataTable(
{dataTable()}, options = list(bFilter = FALSE, iDisplayLength = 50))
output$eventsByYear <- renderChart({
data <- dt.agg.year()[, list(COUNT=sum(COUNT)), by=list(YEAR)]
setnames(data, c('YEAR', 'COUNT'), c("Year", "Count"))
eventsByYear <- nPlot(
Count ~ Year,
data = data[order(data$Year)],
type = "lineChart", dom = 'eventsByYear', width = 650
)
eventsByYear$chart(margin = list(left = 100))
eventsByYear$yAxis( axisLabel = "Count", width = 80)
eventsByYear$xAxis( axisLabel = "Year", width = 70)
return(eventsByYear)
})
output$populationImpact <- renderChart({
data <- melt(
dt.agg.year()[, list(Year=YEAR, Injuries=INJURIES, Fatalities=FATALITIES)],
id='Year'
)
populationImpact <- nPlot(
value ~ Year, group = 'variable', data = data[order(-Year, variable, decreasing = T)],
type = 'stackedAreaChart', dom = 'populationImpact', width = 650
)
populationImpact$chart(margin = list(left = 100))
populationImpact$yAxis( axisLabel = "Affected", width = 80)
populationImpact$xAxis( axisLabel = "Year", width = 70)
return(populationImpact)
})
output$economicImpact <- renderChart({
data <- melt(
dt.agg.year()[, list(Year=YEAR, Propety=PROPDMG, Crops=CROPDMG)],
id='Year'
)
economicImpact <- nPlot(
value ~ Year, group = 'variable', data = data[order(-Year, variable, decreasing = T)],
type = 'stackedAreaChart', dom = 'economicImpact', width = 650
)
economicImpact$chart(margin = list(left = 100))
economicImpact$yAxis( axisLabel = "Total damage (Million USD)", width = 80)
economicImpact$xAxis( axisLabel = "Year", width = 70)
return(economicImpact)
})
output$downloadData <- downloadHandler(
filename = 'data.csv',
content = function(file) {
write.csv(dataTable(), file, row.names=FALSE)
}
)
})
library(shiny)
shinyUI(
navbarPage("Storm Database Explorer",
tabPanel("Plot",
sidebarPanel(
sliderInput("range",
"Range:",
min = 1950,
max = 2011,
value = c(1993, 2011),
format="####"),
uiOutput("evtypeControls")
),
mainPanel(
tabsetPanel(
# Data by state
tabPanel('By state',
column(3,
wellPanel(
radioButtons(
"populationCategory",
"Population impact category:",
c("Both" = "both", "Injuries" = "injuries", "Fatalities" = "fatalities"))
)
),
column(3,
wellPanel(
radioButtons(
"economicCategory",
"Economic impact category:",
c("Both" = "both", "Property damage" = "property", "Crops damage" = "crops"))
)
),
column(7,
plotOutput("populationImpactByState"),
plotOutput("economicImpactByState")
)
),
# Time series data
tabPanel('By year',
h4('Number of events by year', align = "center"),
showOutput("eventsByYear", "nvd3"),
h4('Population impact by year', align = "center"),
showOutput("populationImpact", "nvd3"),
h4('Economic impact by year', align = "center"),
showOutput("economicImpact", "nvd3")
),
# Data
tabPanel('Data',
dataTableOutput(outputId="table"),
downloadButton('downloadData', 'Download')
)
)
)
),
tabPanel("About",
mainPanel(
includeMarkdown("include.md")
)
)
)
)
devtools::install_github('rstudio/shinyapps')
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
